@page "/"
@using CustomerCRUD.Components

<PageTitle>Blazor Web Assembly & Minimal API CRUD Operations</PageTitle>
@if (_showingCreateModal)
{
  <ModalCreatePost OnClickButtonClose="(createdPost)=> CloseModal(createdPost)" />
}
<h1>Blazor Web Assembly & Minimal API CRUD Operations</h1>

<button @onclick="() => _showingCreateModal = true" class="btn btn-success btn-lg w-100 mb-3">
  Create Post
</button>

<div class="table-responsive">
  <table class="table table-bordered border-dark table-striped">
    <thead>
      <tr>
        <th scope="col">PostId (PK)</th>
        <th scope="col">Title</th>
        <th scope="col">Content</th>
        <th scope="col">Actions</th>
      </tr>
    </thead>
    <tbody>
      @if (_posts != null)
      {
        @foreach (var post in _posts)
        {
          <tr>
            <th scope="row">@post.PostId</th>
            <td>@post.Title</td>
            <td>@post.Content</td>
            <td>
              <button class="btn btn-warning w-100 mb-2">
                Update
              </button>
              <button class="btn btn-danger w-100">
                Delete
              </button>
            </td>
          </tr>
        }
      }
    </tbody>
  </table>
</div>

@code {
#pragma warning disable CS8618
  [Inject]
  protected HttpClient HttpClient { get; set; }
#pragma warning restore CS8618

  private List<Post>? _posts = null;
  private bool _showingCreateModal = false;
  protected override async Task OnInitializedAsync()
  {
    //https://localhost:7139
    _posts = await HttpClient.GetFromJsonAsync<List<Post>?>("https://localhost:7139/posts/all");
    Console.WriteLine($"Found {_posts?.Count} posts!");
  }
  private void CloseModal(Post? createdPost)
  {
    if (createdPost != null)
    {
      _posts?.Add(createdPost);
    }
    _showingCreateModal = false;
  }
}